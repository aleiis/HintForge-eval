{
    "kind": "enum",
    "context": "scalar Time\n\nenum StatusType {\n  starting\n  running\n  waiting\n  finished\n  failed\n}\n\nenum  {\n  primary_agent\n  reporter\n  generator\n  refiner\n  reflector\n  enricher\n  adviser\n  coder\n  memorist\n  searcher\n  installer\n  pentester\n  summarizer\n}\n\nenum TerminalLogType {\n  stdin\n  stdout\n  stderr\n}\n\nenum MessageLogType {\n  thoughts\n  browser\n  terminal\n  file\n  search\n  advice\n  ask\n  input\n  done\n}\n\nenum ResultFormat {\n  plain\n  markdown\n  terminal\n}\n\nenum ResultType {\n  success\n  error\n}\n\nenum TerminalType {\n  primary\n  secondary\n}\n\nenum VectorStoreAction {\n  retrieve\n  store\n}\n\ntype Terminal {\n  id: ID!\n  type: TerminalType!\n  name: String!\n  image: String!\n  connected: Boolean!\n  createdAt: Time!\n}\n\ntype Flow {\n  id: ID!\n  title: String!\n  status: StatusType!\n  terminals: [Terminal!]\n  provider: String!\n  createdAt: Time!\n  updatedAt: Time!\n}\n\ntype Task {\n  id: ID!\n  title: String!\n  status: StatusType!\n  input: String!\n  result: String!\n  flowId: ID!\n  subtasks: [Subtask!]\n  createdAt: Time!\n  updatedAt: Time!\n}\n\ntype Subtask {\n  id: ID!\n  status: StatusType!\n  title: String!\n  description: String!\n  result: String!\n  taskId: ID!\n  createdAt: Time!\n  updatedAt: Time!\n}\n\ntype AgentLog {\n  id: ID!\n  initiator: AgentType!\n  executor: AgentType!\n  task: String!\n  result: String!\n  flowId: ID!\n  taskId: ID\n  subtaskId: ID\n  createdAt: Time!\n}\n\ntype MessageLog {\n  id: ID!\n  type: MessageLogType!\n  message: String!\n  result: String!\n  resultFormat: ResultFormat!\n  flowId: ID!\n  taskId: ID\n  subtaskId: ID\n  createdAt: Time!\n}\n\ntype SearchLog {\n  id: ID!\n  initiator: AgentType!\n  executor: AgentType!\n  engine: String!\n  query: String!\n  result: String!\n  flowId: ID!\n  taskId: ID\n  subtaskId: ID\n  createdAt: Time!\n}\n\ntype TerminalLog {\n  id: ID!\n  flowId: ID!\n  type: TerminalLogType!\n  text: String!\n  terminal: ID!\n  createdAt: Time!\n}\n\ntype VectorStoreLog {\n  id: ID!\n  initiator: AgentType!\n  executor: AgentType!\n  filter: String!\n  query: String!\n  action: VectorStoreAction!\n  result: String!\n  flowId: ID!\n  taskId: ID\n  subtaskId: ID\n  createdAt: Time!\n}\n\ntype Screenshot {\n  id: ID!\n  flowId: ID!\n  name: String!\n  url: String!\n  createdAt: Time!\n}\n\ntype Prompt {\n  type: String!\n  prompt: String!\n}\n\ntype Query {\n  providers: [String!]!\n  prompts: [Prompt!]!\n  prompt(promptType: String!): String!\n  flows: [Flow!]\n  flow(flowId: ID!): Flow!\n  tasks(flowId: ID!): [Task!]\n  screenshots(flowId: ID!): [Screenshot!]\n  terminalLogs(flowId: ID!): [TerminalLog!]\n  messageLogs(flowId: ID!): [MessageLog!]\n  agentLogs(flowId: ID!): [AgentLog!]\n  searchLogs(flowId: ID!): [SearchLog!]\n  vectorStoreLogs(flowId: ID!): [VectorStoreLog!]\n}\n\ntype Mutation {\n  createFlow(modelProvider: String!, input: String!): Flow!\n  putUserInput(flowId: ID!, input: String!): ResultType!\n  finishFlow(flowId: ID!): Flow!\n  deleteFlow(flowId: ID!): ResultType!\n  updatePrompt(promptType: String!, prompt: String!): ResultType!\n  resetPrompt(promptType: String!): ResultType!\n}\n\ntype Subscription {\n  flowCreated: Flow!\n  flowDeleted: Flow!\n  flowUpdated(flowId: ID!): Flow!\n  taskCreated(flowId: ID!): Task!\n  taskUpdated(flowId: ID!): Task!\n\n  screenshotAdded(flowId: ID!): Screenshot!\n  terminalLogAdded(flowId: ID!): TerminalLog!\n  messageLogAdded(flowId: ID!): MessageLog!\n  messageLogUpdated(flowId: ID!): MessageLog!\n  agentLogAdded(flowId: ID!): AgentLog!\n  searchLogAdded(flowId: ID!): SearchLog!\n  vectorStoreLogAdded(flowId: ID!): VectorStoreLog!\n}\n",
    "expected": "AgentType",
    "offset": 90
}