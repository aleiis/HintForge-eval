scalar Time

enum StatusType {
  starting
  running
  waiting
  finished
  failed
}

enum AgentType {
  primary_agent
  reporter
  generator
  refiner
  reflector
  enricher
  adviser
  coder
  memorist
  searcher
  installer
  pentester
  summarizer
}

enum TerminalLogType {
  stdin
  stdout
  stderr
}

enum MessageLogType {
  thoughts
  browser
  terminal
  file
  search
  advice
  ask
  input
  done
}

enum ResultFormat {
  plain
  markdown
  terminal
}

enum ResultType {
  success
  error
}

enum TerminalType {
  primary
  secondary
}

enum VectorStoreAction {
  retrieve
  store
}

type Terminal {
  id: ID!
  type: TerminalType!
  name: String!
  image: String!
  connected: Boolean!
  createdAt: Time!
}

type Flow {
  id: ID!
  title: String!
  status: StatusType!
  terminals: [Terminal!]
  provider: String!
  createdAt: Time!
  updatedAt: Time!
}

type Task {
  id: ID!
  title: String!
  status: StatusType!
  input: String!
  result: String!
  flowId: ID!
  subtasks: [Subtask!]
  createdAt: Time!
  updatedAt: Time!
}

type Subtask {
  id: ID!
  status: StatusType!
  title: String!
  description: String!
  result: String!
  taskId: ID!
  createdAt: Time!
  updatedAt: Time!
}

type AgentLog {
  id: ID!
  initiator: AgentType!
  executor: AgentType!
  task: String!
  result: String!
  flowId: ID!
  taskId: ID
  subtaskId: ID
  createdAt: Time!
}

type MessageLog {
  id: ID!
  type: MessageLogType!
  message: String!
  result: String!
  resultFormat: ResultFormat!
  flowId: ID!
  taskId: ID
  subtaskId: ID
  createdAt: Time!
}

type SearchLog {
  id: ID!
  initiator: AgentType!
  executor: AgentType!
  engine: String!
  query: String!
  result: String!
  flowId: ID!
  taskId: ID
  subtaskId: ID
  createdAt: Time!
}

type TerminalLog {
  id: ID!
  flowId: ID!
  type: TerminalLogType!
  text: String!
  terminal: ID!
  createdAt: Time!
}

type VectorStoreLog {
  id: ID!
  initiator: AgentType!
  executor: AgentType!
  filter: String!
  query: String!
  action: VectorStoreAction!
  result: String!
  flowId: ID!
  taskId: ID
  subtaskId: ID
  createdAt: Time!
}

type Screenshot {
  id: ID!
  flowId: ID!
  name: String!
  url: String!
  createdAt: Time!
}

type Prompt {
  type: String!
  prompt: String!
}

type Query {
  providers: [String!]!
  prompts: [Prompt!]!
  prompt(promptType: String!): String!
  flows: [Flow!]
  flow(flowId: ID!): Flow!
  tasks(flowId: ID!): [Task!]
  screenshots(flowId: ID!): [Screenshot!]
  terminalLogs(flowId: ID!): [TerminalLog!]
  messageLogs(flowId: ID!): [MessageLog!]
  agentLogs(flowId: ID!): [AgentLog!]
  searchLogs(flowId: ID!): [SearchLog!]
  vectorStoreLogs(flowId: ID!): [VectorStoreLog!]
}

type Mutation {
  createFlow(modelProvider: String!, input: String!): Flow!
  putUserInput(flowId: ID!, input: String!): ResultType!
  finishFlow(flowId: ID!): Flow!
  deleteFlow(flowId: ID!): ResultType!
  updatePrompt(promptType: String!, prompt: String!): ResultType!
  resetPrompt(promptType: String!): ResultType!
}

type Subscription {
  flowCreated: Flow!
  flowDeleted: Flow!
  flowUpdated(flowId: ID!): Flow!
  taskCreated(flowId: ID!): Task!
  taskUpdated(flowId: ID!): Task!

  screenshotAdded(flowId: ID!): Screenshot!
  terminalLogAdded(flowId: ID!): TerminalLog!
  messageLogAdded(flowId: ID!): MessageLog!
  messageLogUpdated(flowId: ID!): MessageLog!
  agentLogAdded(flowId: ID!): AgentLog!
  searchLogAdded(flowId: ID!): SearchLog!
  vectorStoreLogAdded(flowId: ID!): VectorStoreLog!
}
