{
  "context": "type Query {\n    thisShoudlntGetGenerated: Boolean\n}\n\ntype Mutation {\n    thisShoudlntGetGenerated: Boolean\n}\n\ntype Subscription {\n    thisShoudlntGetGenerated: Boolean\n}\n\ntype MissingTypeNotNull implements MissingInterface & ExistingInterface {\n    name: String!\n    enum: MissingEnum!\n    int: MissingInterface!\n    existing: ExistingType!\n    missing2: MissingTypeNullable!\n}\n\ntype MissingTypeNullable implements MissingInterface & ExistingInterface {\n    \n}\n\ninput MissingInput {\n    name: String\n    enum: MissingEnum\n}\n\nenum MissingEnum {\n    Hello\n    Goodbye\n}\n\ninterface MissingInterface {\n    name: String\n}\n\nunion MissingUnion = MissingTypeNotNull | MissingTypeNullable | ExistingType\n\ntype ExistingType implements MissingInterface & ExistingInterface {\n    name: String\n    enum: ExistingEnum\n    int: ExistingInterface\n    existing: MissingTypeNullable\n}\n\ninput ExistingInput {\n    name: String\n    enum: ExistingEnum\n}\n\nenum ExistingEnum {\n    Hello\n    Goodbye\n}\n\ninterface ExistingInterface {\n    name: String\n}\n\nunion ExistingUnion = MissingTypeNotNull | MissingTypeNullable  | ExistingType\n\n\"TypeWithDescription is a type with a description\"\ntype TypeWithDescription {\n    name: String\n}\n\n\"EnumWithDescription is an enum with a description\"\nenum EnumWithDescription {\n    CAT\n    DOG\n}\n\n\"InterfaceWithDescription is an interface with a description\"\ninterface InterfaceWithDescription {\n    name: String\n}\n\n\"UnionWithDescription is an union with a description\"\nunion UnionWithDescription = TypeWithDescription | ExistingType\n\n\ninterface Foo_Barer {\n    name: String!\n}\n\ntype _Foo_Barr implements  Foo_Barer {\n    name: String!\n}\n",
  "expected": "name: String\n    enum: MissingEnum\n    int: MissingInterface\n    existing: ExistingType\n    missing2: MissingTypeNotNull",
  "offset": 459,
  "instruction": "El fragmento describe un tipo de objeto en GraphQL con varios campos, incluyendo un string, un enum, una interfaz, un tipo existente y un tipo que no puede ser nulo."
}